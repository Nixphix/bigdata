pyspark -master local

ordersRDD = sc.textFile("/user/cloudera/sqoop_import/orders/").map(lambda x:(x.split(",")[0],x.split(",")[1]))
orderItemsRDD = sc.textFile("/user/cloudera/sqoop_import/order_items/").map(lambda x:(x.split(",")[1],float(x.split(",")[4])))
joinData = orderItemsRDD.join(ordersRDD).map(lambda x:(x[1][1],x[1][0]))

# agg subtotal by day
revenuPerDayRED = joinData.reduceByKey(lambda acc,val:acc+val)
for i in revenuPerDayRED.sortByKey().take(10): print i
(u'2013-07-25 00:00:00.0', 68153.829999999973)
(u'2013-07-26 00:00:00.0', 136520.17000000007)
(u'2013-07-27 00:00:00.0', 101074.34)
(u'2013-07-28 00:00:00.0', 87123.079999999987)
(u'2013-07-29 00:00:00.0', 137287.09000000005)

revenuPerDayAGG = joinData.aggregateByKey(0,lambda acc,val:acc+val,lambda x,y:x+y)
for i in revenuPerDayAGG.sortByKey().take(10): print i

(u'2013-07-25 00:00:00.0', 68153.829999999973)
(u'2013-07-26 00:00:00.0', 136520.17000000007)
(u'2013-07-27 00:00:00.0', 101074.34)
(u'2013-07-28 00:00:00.0', 87123.079999999987)
(u'2013-07-29 00:00:00.0', 137287.09000000005)

ordersRDD = sc.textFile("/user/cloudera/sqoop_import/orders/").map(lambda x:(x.split(",")[0],x))
orderItemsRDD = sc.textFile("/user/cloudera/sqoop_import/order_items/").map(lambda x:(x.split(",")[1],x))
joinData = orderItemsRDD.join(ordersRDD)
joinMap = joinData.map(lambda x: ((x[1][1].split(",")[1],x[0]),float(x[1][0].split(",")[4])))

revPerOrderPerDayRED = joinMap.reduceByKey(lambda a,b:a+b)
revPerDayMap = revPerOrderPerDayRED.map(lambda x:(x[0][0],x[1]))

#Agg order subtotal
revPerDayCOMB = revPerDayMap.combineByKey(lambda x:(x,1),lambda acc,val:(acc[0]+val,acc[1]+1),lambda x,y:(round(x[0]+y[0]),x[1]+y[1]))
revPerDayAGG = revPerDayMap.aggregateByKey((0.0,0),lambda acc,val:(acc[0]+val,acc[1]+1),lambda x,y:(round(x[0]+y[0]),x[1]+y[1]))

avgRevCOMB = revPerDayCOMB.map(lambda x: (x[0],x[1][0]/x[1][1]))
avgRevAGG = revPerDayCOMB.map(lambda x: (x[0],x[1][0]/x[1][1]))

for i in avgRevCOMB.sortByKey().collect(): print i

(u'2014-07-20 00:00:00.0', 584.71074380165294)
(u'2014-07-21 00:00:00.0', 599.51980198019805)
(u'2014-07-22 00:00:00.0', 625.07692307692309)
(u'2014-07-23 00:00:00.0', 637.6159420289855)
(u'2014-07-24 00:00:00.0', 588.33939393939397)

for i in avgRevAGG.sortByKey().collect(): print i

(u'2014-07-20 00:00:00.0', 584.71074380165294)
(u'2014-07-21 00:00:00.0', 599.51980198019805)
(u'2014-07-22 00:00:00.0', 625.07692307692309)
(u'2014-07-23 00:00:00.0', 637.6159420289855)
(u'2014-07-24 00:00:00.0', 588.33939393939397)

#---------------------- Max - Pyspark -------------------------#

# find customer with max transaction amount per day
ordersRDD = sc.textFile("/user/cloudera/sqoop_import/orders/").map(lambda x:(x.split(",")[0],x))
orderItemsRDD = sc.textFile("/user/cloudera/sqoop_import/order_items/").map(lambda x:(x.split(",")[1],x))
joinDataRDD = orderItemsRDD.join(ordersRDD).map(lambda x: (tuple(x[1][1].split(",")[1:3]),float(x[1][0].split(",")[4])))

joinDataRDD.take(1)

totalPerDayCustIDRDD = joinDataRDD.reduceByKey(lambda a,x:a+x)
mapCustIDAmtPerDay = totalPerDayCustIDRDD.map(lambda x: (x[0][0],(x[0][1],x[1])))
maxTransDayRDD = mapCustIDAmtPerDay.reduceByKey(lambda x,y: x if x[1]>y[1] else y )
maxTransDayRDD.sortByKey().take(1)
for i in maxTransDayRDD.sortByKey().collect(): print i

# sample output
(u'2014-07-18 00:00:00.0', (u'1220', 1799.8800000000001))
(u'2014-07-19 00:00:00.0', (u'5265', 1579.8900000000001))
(u'2014-07-20 00:00:00.0', (u'4956', 1629.76))
(u'2014-07-21 00:00:00.0', (u'5864', 1689.8600000000001))
(u'2014-07-22 00:00:00.0', (u'7988', 1749.8900000000001))
(u'2014-07-23 00:00:00.0', (u'5533', 2149.9899999999998))
(u'2014-07-24 00:00:00.0', (u'3464', 1825.75))

#---------------------- Max - Hive -------------------------#

# sql using max 
SELECT order_date,
  customer_id,
  max_total
FROM
  (SELECT src.order_date,
    src.customer_id,
    src.amount,
    MAX(src.amount) over (partition BY src.order_date) max_total
  FROM
    (SELECT o.order_date order_date,
      o.order_customer_id customer_id,
      SUM(i.order_item_subtotal) amount
    FROM orders o
    JOIN order_items i
    ON o.order_id = i.order_item_order_id
    GROUP BY o.order_date,
      o.order_customer_id
    ) src
  )mx
WHERE max_total = amount
ORDER BY order_date;

# sample output
2014-07-18 00:00:00     1220    1799.88
2014-07-19 00:00:00     5265    1579.89
2014-07-20 00:00:00     4956    1629.76
2014-07-21 00:00:00     5864    1689.8600000000001
2014-07-22 00:00:00     7988    1749.89
2014-07-23 00:00:00     5533    2149.99
2014-07-24 00:00:00     3464    1825.75

# sql using rank 
SELECT order_date,
  customer_id,
  amount
FROM
  (SELECT src.order_date,
    src.customer_id,
    src.amount,
    rank() over (partition BY src.order_date order by src.amount DESC) total_rank
  FROM
    (SELECT o.order_date order_date,
      o.order_customer_id customer_id,
      SUM(i.order_item_subtotal) amount
    FROM orders o
    JOIN order_items i
    ON o.order_id = i.order_item_order_id
    GROUP BY o.order_date,
      o.order_customer_id
    ) src
  )mx
WHERE total_rank = 1
ORDER BY order_date; 

# sample output
2014-07-18 00:00:00     1220    1799.88
2014-07-19 00:00:00     5265    1579.89
2014-07-20 00:00:00     4956    1629.76
2014-07-21 00:00:00     5864    1689.8600000000001
2014-07-22 00:00:00     7988    1749.89
2014-07-23 00:00:00     5533    2149.99
2014-07-24 00:00:00     3464    1825.75

# sql using rank, take top 10
SELECT order_date,
  customer_id,
  total_rank,
  amount
FROM
  (SELECT src.order_date,
    src.customer_id,
    src.amount,
    rank() over (partition BY src.order_date order by src.amount DESC) total_rank
  FROM
    (SELECT o.order_date order_date,
      o.order_customer_id customer_id,
      SUM(i.order_item_subtotal) amount
    FROM orders o
    JOIN order_items i
    ON o.order_id = i.order_item_order_id
    GROUP BY o.order_date,
      o.order_customer_id
    ) src
  )mx
WHERE total_rank < 11
ORDER BY order_date,
  total_rank; 

# sample output
2014-07-22 00:00:00     7988    1       1749.89
2014-07-22 00:00:00     4185    2       1529.8200000000002
2014-07-22 00:00:00     9153    3       1379.8300000000002
2014-07-22 00:00:00     12394   4       1329.82
2014-07-22 00:00:00     1798    5       1309.8500000000001
2014-07-22 00:00:00     9546    6       1259.91
2014-07-22 00:00:00     11897   7       1249.88
2014-07-22 00:00:00     5171    8       1214.9
2014-07-22 00:00:00     9761    9       1199.93
2014-07-22 00:00:00     898     10      1199.91
2014-07-23 00:00:00     5533    1       2149.99
2014-07-23 00:00:00     10854   2       1739.88
2014-07-23 00:00:00     6977    3       1454.9
2014-07-23 00:00:00     7275    4       1379.77
2014-07-23 00:00:00     3937    5       1359.88
2014-07-23 00:00:00     8812    6       1309.81
2014-07-23 00:00:00     1756    7       1219.8500000000001
2014-07-23 00:00:00     7457    8       1199.9
2014-07-23 00:00:00     10278   9       1199.8700000000001
2014-07-23 00:00:00     11085   10      1149.88
2014-07-24 00:00:00     3464    1       1825.75
2014-07-24 00:00:00     2621    2       1479.88
2014-07-24 00:00:00     11397   3       1359.81
2014-07-24 00:00:00     9208    4       1329.89
2014-07-24 00:00:00     1551    5       1299.91
2014-07-24 00:00:00     11711   6       1289.77
2014-07-24 00:00:00     11274   7       1279.9
2014-07-24 00:00:00     2857    8       1249.9
2014-07-24 00:00:00     17      9       1209.8400000000001
2014-07-24 00:00:00     3728    10      1165.8600000000001
